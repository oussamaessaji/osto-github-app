name: Ostorlab Security Scanner
description: Scan mobile apps for outdated dependencies, hardcoded secrets, privacy leakages, and insecure code (Signup at ostorlab.co).
inputs:
  action_type:
    description: "Specifies the action to perform: 'scan' to run Ostorlab scan, or 'graphql' to call the GraphQL API."
    required: true
    default: scan
  scan_profile:
    description: Specifies your scan profile ( free "fast_scan" for community scans and "full_scan" for full analysis)
    required: false
    default: fast_scan
  asset_type:
    description: Type of asset to scan. (['android-apk', 'android-aab', 'ios-ipa'])
    required: false
  target:
    description: Path to file .apk|.ios file.
    required: false
  scan_title:
    description: Title for your scan.
    required: false
  ostorlab_api_key:
    description: API key from Ostorlab.
    required: false
  break_on_risk_rating:
    description: Wait for the scan results and force the action to fail if the scan risk rating is equal or higher than this value. (['HIGH', 'MEDIUM', 'LOW', 'POTENTIALLY'])
    required: false
  max_wait_minutes:
    description: Specifies the maximum number of minutes to wait for scan results.
    required: false
    default: 20
  extra:
    description: Extra args to be passed to Ostorlab CLI to create a scan, common case is setting test credentials.
    required: false
  graphql_endpoint:
    description: GraphQL API endpoint to send application binary and PR details.
    required: false
  graphql_api_token:
    description: Authorization token for the GraphQL API.
    required: false

outputs:
  scan_id:
    description: ID of the created scan.
  status:
    description: Status of scan.

runs:
  using: "composite"
  steps:
    - name: Set up Python3.11
      uses: actions/setup-python@v5.0.0
      with:
        python-version: 3.11

    - name: Install Ostorlab
      if: inputs.action_type == 'scan'
      run: |
        python -m pip install --upgrade pip
        python -m pip install ostorlab
      shell: bash

    - name: Run Ostorlab Scan
      if: inputs.action_type == 'scan'
      run: |
        ostorlab --api-key="$INPUT_OSTORLAB_API_KEY" ci-scan run --log-flavor=github --title="$INPUT_SCAN_TITLE" --scan-profile="$INPUT_SCAN_PROFILE" --break-on-risk-rating="$INPUT_BREAK_ON_RISK_RATING" --max-wait-minutes="$INPUT_MAX_WAIT_MINUTES" $INPUT_EXTRA $INPUT_ASSET_TYPE $INPUT_TARGET
      shell: bash
      env:
        INPUT_OSTORLAB_API_KEY: ${{ inputs.ostorlab_api_key }}
        INPUT_SCAN_TITLE: ${{ inputs.scan_title }}
        INPUT_SCAN_PROFILE: ${{ inputs.scan_profile }}
        INPUT_BREAK_ON_RISK_RATING: ${{ inputs.break_on_risk_rating }}
        INPUT_MAX_WAIT_MINUTES: ${{ inputs.max_wait_minutes }}
        INPUT_EXTRA: ${{ inputs.extra }}
        INPUT_ASSET_TYPE: ${{ inputs.asset_type }}
        INPUT_TARGET: ${{ inputs.target }}

    - name: Read Application Binary
      if: inputs.action_type == 'graphql'
      id: read-binary
      run: |
        echo "Reading application binary from path: $INPUT_TARGET"
        base64_binary=$(base64 "$INPUT_TARGET" | tr -d '\n')
        echo "::set-output name=binary::$base64_binary"
      shell: bash

    - name: Send Binary and PR Details to GraphQL API
      if: inputs.action_type == 'graphql'
      id: send-graphql
      run: |
        echo "Sending binary and PR details to GraphQL API."
        curl -X POST "$INPUT_GRAPHQL_ENDPOINT" \
          -H "Authorization: Bearer $INPUT_GRAPHQL_API_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
            "query": "mutation($binary: String!, $prDetails: String!) { uploadBinary(binary: $binary, prDetails: $prDetails) { status message } }",
            "variables": {
              "binary": "'"${{ steps.read-binary.outputs.binary }}"'",
              "prDetails": "'"${{ github.event.pull_request.title }}" (PR: #${{ github.event.pull_request.number }})'"
            }
          }'
      shell: bash

branding:
  icon: "shield"
  color: "blue"
